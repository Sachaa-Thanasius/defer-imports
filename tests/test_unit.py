"""Unit tests for defer_imports, e.g. the AST instrumentation and path hook installation."""

import sys

import pytest

from defer_imports import install_import_hook
from defer_imports._comptime import DeferredInstrumenter


def test_path_hook_installation():
    """Test the API for putting/removing the defer_imports path hook from sys.path_hooks."""

    def count_defer_path_hooks() -> int:
        return sum(1 for hook in sys.path_hooks if ("DeferredFileFinder" in hook.__qualname__))

    # It shouldn't be on there by default.
    assert count_defer_path_hooks() == 0
    before_length = len(sys.path_hooks)

    # It should be present after calling install.
    hook_ctx = install_import_hook()
    assert count_defer_path_hooks() == 1
    assert len(sys.path_hooks) == before_length + 1

    # Calling uninstall should remove it.
    hook_ctx.uninstall()
    assert count_defer_path_hooks() == 0
    assert len(sys.path_hooks) == before_length

    # Calling uninstall if it's not present should do nothing to sys.path_hooks.
    hook_ctx.uninstall()
    assert count_defer_path_hooks() == 0
    assert len(sys.path_hooks) == before_length


@pytest.mark.parametrize(
    ("before", "after"),
    [
        pytest.param(
            """'''Module docstring here'''""",
            '''\
"""Module docstring here"""
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
del @DeferredImportKey, @DeferredImportProxy
''',
            id="inserts statements after module docstring",
        ),
        pytest.param(
            """from __future__ import annotations""",
            """\
from __future__ import annotations
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
del @DeferredImportKey, @DeferredImportProxy
""",
            id="Inserts statements after __future__ import",
        ),
        pytest.param(
            """\
from contextlib import nullcontext

import defer_imports

with defer_imports.until_use, nullcontext():
    import inspect
""",
            """\
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
from contextlib import nullcontext
import defer_imports
with defer_imports.until_use, nullcontext():
    import inspect
del @DeferredImportKey, @DeferredImportProxy
""",
            id="does nothing if used with another context manager",
        ),
        pytest.param(
            """\
import defer_imports

with defer_imports.until_use:
    import inspect
""",
            """\
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
import defer_imports
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import inspect
    if type(inspect) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('inspect')
        @local_ns[@DeferredImportKey('inspect', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
del @DeferredImportKey, @DeferredImportProxy
""",
            id="regular import",
        ),
        pytest.param(
            """\
import defer_imports

with defer_imports.until_use:
    import importlib
    import importlib.abc
""",
            """\
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
import defer_imports
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import importlib
    if type(importlib) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('importlib')
        @local_ns[@DeferredImportKey('importlib', @temp_proxy)] = @temp_proxy
    import importlib.abc
    if type(importlib) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('importlib')
        @local_ns[@DeferredImportKey('importlib', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
del @DeferredImportKey, @DeferredImportProxy
""",
            id="mixed imports",
        ),
        pytest.param(
            """\
import defer_imports

with defer_imports.until_use:
    from . import a
""",
            """\
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
import defer_imports
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    from . import a
    if type(a) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('a')
        @local_ns[@DeferredImportKey('a', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
del @DeferredImportKey, @DeferredImportProxy
""",
            id="relative import",
        ),
    ],
)
def test_instrumentation(before: str, after: str):
    """Test what code is generated by the instrumentation side of defer_imports."""

    import ast

    filename = "<unknown>"
    orig_tree = ast.parse(before, filename, "exec")
    transformer = DeferredInstrumenter(before, filename)
    new_tree = ast.fix_missing_locations(transformer.visit(orig_tree))

    assert f"{ast.unparse(new_tree)}\n" == after


@pytest.mark.parametrize(
    ("before", "after"),
    [
        pytest.param(
            """\
import inspect
""",
            """\
import defer_imports
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import inspect
    if type(inspect) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('inspect')
        @local_ns[@DeferredImportKey('inspect', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
del @DeferredImportKey, @DeferredImportProxy
""",
            id="regular import",
        ),
        pytest.param(
            """\
import hello
import world
import foo
""",
            """\
import defer_imports
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import hello
    if type(hello) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('hello')
        @local_ns[@DeferredImportKey('hello', @temp_proxy)] = @temp_proxy
    import world
    if type(world) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('world')
        @local_ns[@DeferredImportKey('world', @temp_proxy)] = @temp_proxy
    import foo
    if type(foo) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('foo')
        @local_ns[@DeferredImportKey('foo', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
del @DeferredImportKey, @DeferredImportProxy
""",
            id="multiple imports consecutively",
        ),
        pytest.param(
            """\
import hello
import world

print("hello")

import foo
""",
            """\
import defer_imports
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import hello
    if type(hello) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('hello')
        @local_ns[@DeferredImportKey('hello', @temp_proxy)] = @temp_proxy
    import world
    if type(world) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('world')
        @local_ns[@DeferredImportKey('world', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
print('hello')
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import foo
    if type(foo) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('foo')
        @local_ns[@DeferredImportKey('foo', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
del @DeferredImportKey, @DeferredImportProxy
""",
            id="multiple imports separated by statement 1",
        ),
        pytest.param(
            """\
import hello
import world

def do_the_thing(a: int) -> int:
    return a

import foo
""",
            """\
import defer_imports
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import hello
    if type(hello) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('hello')
        @local_ns[@DeferredImportKey('hello', @temp_proxy)] = @temp_proxy
    import world
    if type(world) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('world')
        @local_ns[@DeferredImportKey('world', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns

def do_the_thing(a: int) -> int:
    return a
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import foo
    if type(foo) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('foo')
        @local_ns[@DeferredImportKey('foo', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
del @DeferredImportKey, @DeferredImportProxy
""",
            id="multiple imports separated by statement 2",
        ),
        pytest.param(
            """\
import hello

def do_the_thing(a: int) -> int:
    import world
    return a
""",
            """\
import defer_imports
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import hello
    if type(hello) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('hello')
        @local_ns[@DeferredImportKey('hello', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns

def do_the_thing(a: int) -> int:
    import world
    return a
del @DeferredImportKey, @DeferredImportProxy
""",
            id="nothing done for imports within function",
        ),
        pytest.param(
            """\
import hello
from world import *
import foo
""",
            """\
import defer_imports
from defer_imports._runtime import DeferredImportKey as @DeferredImportKey, DeferredImportProxy as @DeferredImportProxy
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import hello
    if type(hello) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('hello')
        @local_ns[@DeferredImportKey('hello', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
from world import *
with defer_imports.until_use:
    @local_ns = locals()
    @temp_proxy = None
    import foo
    if type(foo) is @DeferredImportProxy:
        @temp_proxy = @local_ns.pop('foo')
        @local_ns[@DeferredImportKey('foo', @temp_proxy)] = @temp_proxy
    del @temp_proxy, @local_ns
del @DeferredImportKey, @DeferredImportProxy
""",
            id="avoids doing anything with wildcard imports",
        ),
    ],
)
def test_module_instrumentation(before: str, after: str):
    """Test what code is generated by the instrumentation side of defer_imports if applied at a module level."""

    import ast

    filename = "<unknown>"
    orig_tree = ast.parse(before, filename, "exec")
    transformer = DeferredInstrumenter(before, filename, module_level=True)
    new_tree = ast.fix_missing_locations(transformer.visit(orig_tree))

    assert f"{ast.unparse(new_tree)}\n" == after
