[build-system]
requires = ["flit_core>=3.12,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "defer-imports"
description = "Lazy imports with regular syntax in pure Python."
requires-python = ">=3.9"
license = "MIT"
license-files = ["LICENSE*"]
readme = { file = "README.rst", content-type = "text/x-rst" }
authors = [{ name = "Sachaa-Thanasius", email = "sachaathanasius@gmail.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/Sachaa-Thanasius/defer-imports"
Documentation = "https://github.com/Sachaa-Thanasius/defer-imports#readme"
Issues = "https://github.com/Sachaa-Thanasius/defer-imports/issues"
Source = "https://github.com/Sachaa-Thanasius/defer-imports"

[dependency-groups]
dev = ["tox>=4.24.1", "typing-extensions"]
test = ["pytest>=8", "pytest-rerunfailures"]
cov = ["coverage>=7", "covdefaults"]
bench = ["slothy==1.0.0"]


# -------- Test config --------

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib", "--strict-markers", "--strict-config"]

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["defer_imports", "tests"]
parallel = true

[tool.coverage.paths]
defer_imports = ["src", "*/site-packages"]


# -------- Linter config --------

[tool.ruff]
include = ["src/defer_imports/*.py"]
extend-exclude = ["bench/sample_*.py", "tests/sample_*.py"]  # Generated.
line-length = 120

[tool.ruff.lint]
select = [
    "A",
    "ANN",
    "ASYNC",
    "B",
    "BLE",
    "C4",
    "COM",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "F",
    "FURB",
    "G",
    "I",
    "ICN",
    "INP",
    "ISC",
    "LOG",
    "NPY",
    "PD",
    "PERF",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLOT",
    "T10",
    "T20",
    "TC",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT",
    # "FBT",
]
extend-ignore = [
    # ---- General
    "S101",    # Use of assert here is a known quantity for typing cases. All uses should be safe to optimize out.
    "SIM105",  # Suppressable exception. contextlib.suppress is a stylistic choice with overhead.
    "C90",     # McCabe complexity.
    "ANN204",  # Special method return types are usually implicit and/or known by type checker.
    "ANN401",  # Any is needed for some annotations.
    "UP038",   # isinstance performs better with tuples than unions.
    "PT001",   # pytest recommends against empty parentheses on pytest.fixture.
    "TC001",   # Don't eagerly put things in TYPE_CHECKING blocks.
    "TC002",   # Don't eagerly put things in TYPE_CHECKING blocks.
    "TC003",   # Don't eagerly put things in TYPE_CHECKING blocks.
    "PD011",   # Erroneous issue that triggers for any .values attribute access at all.
    "PLR2004", # "Magic number" depends on the use case.
    "RUF002",  # "Ambiguous character" depends on the use case.
    "RUF003",  # "Ambiguous character" depends on the use case.
    "RUF022",  # __all__ ordering can be meaningful.
    "RUF023",  # __slots__ ordering can be meaningful.

    # ---- Recommended by Ruff when using Ruff format
    "W191",
    "E111",
    "E114",
    "E117",
    "E501",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",
    "W291",   # Not recommended, but ruff format handles it as well.
    "W293",   # Not recommended, but ruff format handles it as well.

    # ---- Project-specific rules
    # Readability.
    "SIM108",  # if-else instead of a ternary.
    "RET505",  # elif/else after return.
    "RET507",  # elif/else after continue.
    "RET508",  # elif/else after break.
    "PLR5501", # if within else block instead of elif.
]
unfixable = [
    "ERA", # Prevent unlikely erroneous deletion.
]

[tool.ruff.lint.isort]
lines-after-imports = 2
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.flake8-implicit-str-concat]
allow-multiline = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
# ---- Package code
"src/defer_imports/ast_rewrite.py" = [
    "A002", # Allow some shadowing of builtins by parameter names.
]

# ---- Test code
"tests/**/test_*.py" = [
    "T201",   # Printing is fine.
    "T203",   # Pretty-printing is fine.
    "ANN201", # Don't need return annotations in tests.
    "ANN202", # Don't need return annotations in tests.
    "S102",   # exec is used to test for NameError within a module's namespace.
]
"tests/sample_stdlib_imports.py" = [
    "F401",   # Unused imports are fine; we're testing import success.
    "ERA001", # Plenty of imports are commented out with explanations next to them.
    "T100",   # Importing pdb is fine.
]
"bench/**/*.py" = [
    "T201",   # Printing is fine.
    "F401",   # Unused imports are fine; we're testing import speed.
    "ERA001", # Plenty of imports are commented out with explanations next to them.
]
"bench/**/sample_*.py" = [
    "T100", # Importing pdb is fine.
]


# -------- Type-checker config --------

[tool.pyright]
include = ["src/defer_imports", "tests"]
pythonVersion = "3.9"
pythonPlatform = "All"
typeCheckingMode = "strict"

defineConstant = { "TYPE_CHECKING" = true } # Just in case.

reportPrivateUsage = "none"                    # We're the library.
reportUnnecessaryIsInstance = "information"    # Verify user input.
reportUninitializedInstanceVariable = "none"   # Occasionally nice as a checkup, but otherwise noisy.
reportCallInDefaultInitializer = "warning"
reportImportCycles = "information"             # Occasionally not a false positive.
reportPropertyTypeMismatch = "warning"
reportShadowedImports = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
reportImplicitStringConcatenation = "warning"
